package cpu

type instruction struct {
	opcode          byte
	instructionSize uint16
	cpuCycles       int
	method          InstructionMethod
}

type InstructionMethod func(GameboyCpu, instruction) uint16

var instructionSet = map[byte]instruction{
	0x00: instruction{0x00, 1, 4, nop},
	0x01: instruction{0x01, 3, 12, loadImmediateTo16BitReg},
	0x02: instruction{0x02, 2, 8, loadAToAddress},
	0x0F: instruction{0x0F, 1, 1, rotateRightCarryA},
	0x11: instruction{0x11, 3, 12, loadImmediateTo16BitReg},
	0x20: instruction{0x20, 2, 8, jumpImmediateConditional},
	0x28: instruction{0x28, 2, 8, jumpImmediateConditional},
	0x30: instruction{0x30, 2, 8, jumpImmediateConditional},
	0x31: instruction{0x31, 3, 12, loadImmediateTo16BitReg},
	0x38: instruction{0x38, 2, 8, jumpImmediateConditional},
	0x3E: instruction{0x3E, 2, 8, loadValueIntoA},
	0xAF: instruction{0xAF, 2, 4, xor},
	0xC3: instruction{0xC3, 3, 12, jumpDirect},
	0xE0: instruction{0xE0, 2, 12, loadAToHighRam},
	0xF3: instruction{0xF3, 1, 4, disableInterupts},
	0xFE: instruction{0xFE, 2, 8, compareA},

	0x06: instruction{0x06, 2, 8, ld_nn_n},
	0x0E: instruction{0x0E, 2, 8, ld_nn_n},
	0x16: instruction{0x16, 2, 8, ld_nn_n},
	0x1E: instruction{0x1E, 2, 8, ld_nn_n},
	0x26: instruction{0x26, 2, 8, ld_nn_n},
	0x2E: instruction{0x2E, 2, 8, ld_nn_n},

	0x7F: instruction{0x7F, 1, 4, ld_r1_r2},
	0x78: instruction{0x78, 1, 4, ld_r1_r2},
	0x79: instruction{0x79, 1, 4, ld_r1_r2},
	0x7A: instruction{0x7A, 1, 4, ld_r1_r2},
	0x7B: instruction{0x7B, 1, 4, ld_r1_r2},
	0x7C: instruction{0x7C, 1, 4, ld_r1_r2},
	0x7D: instruction{0x7D, 1, 4, ld_r1_r2},
	0x7E: instruction{0x7E, 1, 8, ld_r1_r2},
	0x40: instruction{0x40, 1, 4, ld_r1_r2},
	0x41: instruction{0x41, 1, 4, ld_r1_r2},
	0x42: instruction{0x42, 1, 4, ld_r1_r2},
	0x43: instruction{0x43, 1, 4, ld_r1_r2},
	0x44: instruction{0x44, 1, 4, ld_r1_r2},
	0x45: instruction{0x45, 1, 4, ld_r1_r2},
	0x46: instruction{0x46, 1, 8, ld_r1_r2},
	0x48: instruction{0x48, 1, 4, ld_r1_r2},
	0x49: instruction{0x49, 1, 4, ld_r1_r2},
	0x4A: instruction{0x4A, 1, 4, ld_r1_r2},
	0x4B: instruction{0x4B, 1, 4, ld_r1_r2},
	0x4C: instruction{0x4C, 1, 4, ld_r1_r2},
	0x4D: instruction{0x4D, 1, 4, ld_r1_r2},
	0x4E: instruction{0x4E, 1, 8, ld_r1_r2},
	0x50: instruction{0x50, 1, 4, ld_r1_r2},
	0x51: instruction{0x51, 1, 4, ld_r1_r2},
	0x52: instruction{0x52, 1, 4, ld_r1_r2},
	0x53: instruction{0x53, 1, 4, ld_r1_r2},
	0x54: instruction{0x54, 1, 4, ld_r1_r2},
	0x55: instruction{0x55, 1, 4, ld_r1_r2},
	0x56: instruction{0x56, 1, 8, ld_r1_r2},
	0x58: instruction{0x58, 1, 4, ld_r1_r2},
	0x59: instruction{0x59, 1, 4, ld_r1_r2},
	0x5A: instruction{0x5A, 1, 4, ld_r1_r2},
	0x5B: instruction{0x5B, 1, 4, ld_r1_r2},
	0x5C: instruction{0x5C, 1, 4, ld_r1_r2},
	0x5D: instruction{0x5D, 1, 4, ld_r1_r2},
	0x5E: instruction{0x5E, 1, 8, ld_r1_r2},
	0x60: instruction{0x60, 1, 4, ld_r1_r2},
	0x61: instruction{0x61, 1, 4, ld_r1_r2},
	0x62: instruction{0x62, 1, 4, ld_r1_r2},
	0x63: instruction{0x63, 1, 4, ld_r1_r2},
	0x64: instruction{0x64, 1, 4, ld_r1_r2},
	0x65: instruction{0x65, 1, 4, ld_r1_r2},
	0x66: instruction{0x66, 1, 8, ld_r1_r2},
	0x68: instruction{0x68, 1, 4, ld_r1_r2},
	0x69: instruction{0x69, 1, 4, ld_r1_r2},
	0x6A: instruction{0x6A, 1, 4, ld_r1_r2},
	0x6B: instruction{0x6B, 1, 4, ld_r1_r2},
	0x6C: instruction{0x6C, 1, 4, ld_r1_r2},
	0x6D: instruction{0x6D, 1, 4, ld_r1_r2},
	0x6E: instruction{0x6E, 1, 8, ld_r1_r2},
	0x70: instruction{0x70, 1, 8, ld_r1_r2},
	0x71: instruction{0x71, 1, 8, ld_r1_r2},
	0x72: instruction{0x72, 1, 8, ld_r1_r2},
	0x73: instruction{0x73, 1, 8, ld_r1_r2},
	0x74: instruction{0x74, 1, 8, ld_r1_r2},
	0x75: instruction{0x75, 1, 8, ld_r1_r2},
	0x36: instruction{0x36, 2, 12, ld_r1_r2},

	
}
